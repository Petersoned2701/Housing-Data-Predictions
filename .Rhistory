submit()
submit()
install_from_swirl("Statistical Inference")
library(swirl)
swirl()
?Devices
R(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)" col.axis = "blue", col.lab = "red")
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality@Ozone, type = "n")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month = 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
plot(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
plot(airquality$Wind, airquality$Ozone, type = "n")
points(may$Wind, may$Ozone)
points(may$Wind, may$Ozone, col = "blue", pch = 17)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch = c(17,8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality@Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
33/36
deck
52
4/52
0
12/36
12/52
2/51
.64
.64
mypdf()
mypdf
?integrate
integrate(mypdf, 0, 1.6)
1.13
1.41
sqrt(2)
(.997 * .001)/((.997*.001) + (.003 * .999))
.997 * .001
.015 * .999
.000997/(.00097 + .014985)
(.997*.001)/(.997*.001 + .015 * .999)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh + edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean())
apply(allsam, 1, mean)
mean(smeans)
?qunif
sqrt(.75)
(.75 * .3)/((.75*.3) + (.48 * .7))
library(swirl)
swirl()
dice_sqr
sum(dice_fair * dice_sqr)
ex2_fair <- sum(dice_fair * dice_sqr)
ex2_fair - 3.5**2
edh - 3.5 ** 2
sum(dice_high * dice_sqr) - edh^2
sd(apply(matrix(rnorm(10000), 1000), 1, mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000), 1000), 1, mean))
2/sqrt(10)
sd(apply(matric(rpois(10000, 4), 1000), 1, mean))
sd(apply(matrix(rpois(10000, 4), 1000), 1, mean))
1/(2 * sqrt(10))
sd(apply(matrix(sample(0:1, 10000, TRUE), 1000), 1), mean)
sd(apply(matrix(sample(0:1, 10000, TRUE), 1000), 1, mean))
choose(5,3) * .8^3 * .2^2
choose(5,3)*.8^3*.2^2 + choose(5,4)*.8^4*.2 + choose(5,5)*8^5
choose(5,3)*.8^3*.2^2 + choose(5,4)*.8^4*.2 + choose(5,5)*.8^5
?pbinom
pbinom(2, 5, .8, lower.tail = FALSE)
qnorm(.1)
0
?qnorm
qnorm(.975, 3, 2)
3 + 2*.975
1.96*2 +3
pnorm(1200, 1020, 50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(.75, 1020, 50)
.53
.53
?ppois
ppois(3, 2.5*4)
?pbinom
pbinom(5, 1000, .01)
ppois(5, 1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
.6 +c(-1,1)*qnorm(.975)*sqrt(.6(1-.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6(1-.6)/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.36/100)
.6 + c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60, 100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5, 94.32)$conf
?pnorm
pnorm(70, 80, 10)
qnorm(95, 1100, 75)
qnorm(.95, 1100, 75)
?rnorm
brain <- rnorm(100, 1100, 75)
?quantile
quantile(brain, probs = seq(0, .5, .95))
quantile(brain, probs = seq(.95))
quantile(brain, probs = .95)
brain <- (rnorm(100, 1100, 75)+ 2)/(n + 4))
brain <- (rnorm(100, 1100, 75)+ 2)/(n + 4)))
brain <- ((rnorm(100, 1100, 75)+ 2)/(n + 4))
brain <- ((rnorm(100, 1100, 75)+ 2)/(100 + 4))
brain + qnorm(.95)*sqrt(brain * (1-brain)/100)
1100 + qnorm(.95)*75/100
1100 + qnorm(.95)*75/10
choose(5,4)*.5^4*(1-.5)^1 + choose(5,5)*.5^5
15 +1.6/10
?ppois
ppois(10, lambda = 5*3)
swirl()
library(swirl)
swirl()
swirl()
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
plot(x, y, col = kmeans(dataFrame, 6)$cluster, pch = 19, cex = 2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v)
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- (svd1$u[,1:2] * svd1$d[1:2]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- sub1[,1:3]
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
mypclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- apply(svd1$v, which.max)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,c(10:12, maxCon)])
hclustering <- hclust(mdist)
mplclust(hclustering, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
sub1[maxCon]
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1 < 0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
site0
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID = 2008)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1,2), mar = c(4,4,2,1))
plot(dates0, x0sub, pch = 20)
abline(h = mean(x0sub, na.rm = TRUE), lwd = 2)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <= range(x0sub, x1sub, na.rm = TRUE)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52), mrg[,2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[,3])
with(mrg, points(rep(2,52), mrg[,3]))
segments(rep(1,52), mrg[,2], rep(2,52), mrg[,3])
mrg[mrg$mean.x < mrg$mean.y, ]
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30 + z, mean = 20, lower.tail = false)
pnorm(30 + z, mean = 20, lower.tail = FALSE, n = 20)
pnorm(30 + z, mean = 20, lower.tail = FALSE)
pnorm(30 + z, mean = 30, lower.tail = FALSE)
pnorm(30 + z, mean = 32, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd =1, lower.tail = FALSE)
pnorm(30+z, mean = 32, sd =2, lower.tail = FALSE)
pnorm(30+z*2, mean = 32, sd =2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$power
power.t.test(n = 16, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")
power.t.test(power = .8, delta = 2/4, sd = 1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd = 4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd = 200, type = "one.sample", alt = "one.sided")$n
power.t.test(n = 26, power = .8, sd = 1, type = "one.sample", alt = "one.sided")$delta
power.t.test(n = 27, power = .8, sd = 1, type = "one.sample", alt = "one.sided")$delta
head(pvalues)
head(pValues)
sum(pValues < .05)
sum(p.adjust(pValues, method = "bonferroni"))
sum(p.adjust(pValues, method = "bonferroni") < .05)
sum(p.adjust(pValues, method = "BH") < .05)
tail(trueStatus)
table(pValues2 < .05, trueStatus)
24/1000
24/500
table(p.adjust(pValues, method = "bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method = "bonferroni") < .05, trueStatus)
table(p.adjust(pValues2, method = "BH") < .05, trueStatus)
(1 + 2 + 3 + 4 + 5 + 6)/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B)
?sample
sample(fh, nh*B, replace = TRUE)
sam <- sample(fh, nh*B, replace = TRUE)
?matrix
resam <- matrix(data = sam, nrow = B, ncol = nh)
?apply
apply(resam, 1, median)
meds <- apply(resam, 1, median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians, c(.025, .975))
quantile(meds, c(.025, .975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Bdata$count) - mean(Cdata%count)
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCounts, sample(group)))
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts, group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
install.packages('caret')
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
library(caret)
trainIndex = createDataPartition(diagnosis, p=0.5, list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
head(training)
head(testing)
data(concrete)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain, ]
testing = mixtures[-inTrain, ]
library(ggplot2)
qplot(CompressiveStrength ~ index)
install.packages("Hmisc")
library(Hmisc)
?cut2
names(training)
qplot(training$CompressiveStrength)
qplot(training$CompressiveStrength ~ training$index)
qplot(training$CompressiveStrength ~ training)
qplot(CompressiveStrength, data=training)
plot(CompressiveStrength)
plot(training$CompressiveStrength)
?plot
cutflyash <- cut2(training$FlyAsh, g = 10)
qplot(CompressiveStrength, colour=cutflyash, data = training)
qplot(1:nrow(training), CompressiveStrength, colour=cutflyash, data = training)
names(training)
str(training)
cutCement <- cut2(training$Cement, g=10)
qplot(1:nrow(training), CompressiveStrength, colour=cutCement, data = training)
cutBlast <- cut2(training$BlastFurnaceSlag, g = 10)
qplot(1:nrow(training), CompressiveStrength, colour=cutBlast, data = training)
cutWater <- cut2(training$Water, g = 10)
qplot(1:nrow(training), CompressiveStrength, colour=cutWater, data = training)
cutSuper <- cut2(training$Superplasticizer, g = 10)
qplot(1:nrow(training), CompressiveStrength, colour=cutSuper, data = training)
cutAge <- cut2(training$Age, g = 10)
qplot(1:nrow(training), CompressiveStrength, colour=cutAge, data = training)
qplot(training$Superplasticizer)
qplot(log(training$Superplasticizer + 1))
qplot(log(training$Superplasticizer + 1), bins =10)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
names(training)
smallAlz <- training[,c(58:69)]
names(smallAlz)
prComp <- prcomp(smallAlz)
names(prComp)
prComp
smallAlzd <- training[,c(1, 58:69)]
?predict.prcomp
modelFit <-(smallAlzd$diagnosis ~ ., method="glm",data=smallAlzd)
modelFit <-(training$diagnosis ~ ., method="glm",data=smallAlzd)
modelFit <- train(smallAlzd$diagnosis ~ ., method = "glm", data = smallAlzd)
install.packages("e1071")
library(e1071)
modelFit <- train(smallAlzd$diagnosis ~ ., method = "glm", data = smallAlzd)
head(smallAlzd)
type(smallAlzd)
class(smallAlzd)
smallAlzd$diagnosis <- as.factor(as.character(smallAlzd$diagnosis))
modelFit <- train(smallAlzd$diagnosis ~ ., method = "glm", data = smallAlzd)
modelFit <- train(diagnosis ~ ., method = "glm", data = smallAlzd)
confusionMatrix(testing$diagnosis, predict(modelFit,testing))
?preProcess
preProc <- preProcess(smallAlzd, method = "pca", pcaComp = 12)
trainPC <- predict(preProc, smallAlzd)
modelFit2 <- train(smallAlzd$diagnosis ~ ., method="glm", data = trainPC)
modelFit2 <- train(diagnosis ~ ., method="glm", data = trainPC)
confusionMatrix(testing$diagnosis, predict(modelFit2,testing))
testPC <- predict(preProc,testing)
confusionMatrix(testing$diagnosis,predict(modelFit2,testPC))
setwd("C:/Users/Eric/Dropbox/Housing Data")
